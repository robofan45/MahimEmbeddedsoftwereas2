#include <Ticker.h>

// Declare global variables for LED and input signals
const int LED = 15;
const int signal1 = 21;
const int signal2 = 22;
const int signal3 = 4;

int t2freq = 0;
int t3freq = 0;

#define FRAME_DURATION_MS 10     // 10ms
#define FRAME_DURATION_MICROS (FRAME_DURATION_MS * 1000)

Ticker ticker;

unsigned long frameStartTime = 0;
unsigned long frameCounter = 0;

void setup(void)
{
  Serial.begin(9600);
  pinMode(LED, OUTPUT);
  pinMode(signal1, INPUT);
  pinMode(signal2, INPUT);

  ticker.attach_ms(FRAME_DURATION_MS, loop);
}

void Task1() {
  // Blink LED sequence
  digitalWrite(15, HIGH);
  delayMicroseconds(200);
  digitalWrite(15, LOW);
  delayMicroseconds(50);
  digitalWrite(15, HIGH);
  delayMicroseconds(30);
}

void Task2() {
   int f[] = {0,0};
  bool switch1 =false;
  bool start = false;
    // Read signal1 and store values in f array alternatively
  if (switch1 == false)
  {
    f[0] = digitalRead(signal1);
  switch1 = true;
  }
  else {
    f[1] = digitalRead(signal1);
    switch1 = false;
}
int time2;
int time1;
int freq;

   // Calculate time difference between signal changes

if (f[0] != f[1]){
if (f[0] != f[1] && start == true){
  time2 = millis();
start = false;
}

int time1 = millis();
start = true;
  // Calculate frequency
}
int time = (time2 - time1) * 2;

if (time > 0){
  freq=1/time;
}

// print frequency
Serial.println(freq);
t2freq=freq;
}
}

void Task3() {
   int f[1];// Array to store the last two signal readings
  bool switch1 =false;
  bool start = false;
    // Read signal2 and store values in f array alternatively

  if (switch1 == false)
  {
    f[0] = digitalRead(signal2);
  switch1 = true;
  }
  else {
    f[1] = digitalRead(signal2);
    switch1 = false;
}
int time1;
int time2;
  // Calculate time difference between signal changes
if (f[0] !=f[1]){
if (f[0] !=f[1] && start == true){
  int time2 = millis();
start = false;
}

int time1 = millis();
start = true;


}
int time= (time2-time1) * 2;
  // Calculate frequency

int freq=1/time;
Serial.println(freq);
t3freq=freq;
}

bool switch1= false;
bool switch2= false;
int array4[3];

}

void Task4() {
     // Read signal3 and store values in array4
 
  if (switch1 == false && switch2 == false)
  {
    array4[0]=analogRead(signal3);
    switch1 = false;
    switch2 = true;
  }
  else if (switch1 == false && switch2 == true)
  {
     array4[1]=analogRead(signal3); 
     switch1= true;
     switch2 = false;
   
  }

  else if (switch1 == true && switch2 == false)
  {
     array4[2]=analogRead(signal3);
    switch2 = true;
    switch1= true;
  }
   else if (switch1== true && switch2 == true)
    {
        array4[3]=analogRead(signal3);
    switch2 = false;
    switch1= false;
    }
// avreageing the last values
  int Average = (array4[0] + array4[1] + array4[2] + array4[3])/4;
  Serial.println(Average);
}

}

void frame()
{
  unsigned int slot = frameCounter % 10;

  switch (slot) {
    case 0: Task1(); Task3(); break;
    case 1: Task2(); break;
    case 2: Task1(); break;
    case 3: Task4(); break;
    case 4: Task2(); break;
    case 5: Task1(); break;
    case 6: Task2(); break;
    case 7: Task1(); break;
    case 8: Task1(); break;
    case 9: Task2(); break;
  }

  frameCounter++;
}

void loop(void)
{
  frameStartTime = micros();
  frame();
  unsigned long frameElapsedTime = micros() - frameStartTime;

  if (frameElapsedTime > FRAME_DURATION_MICROS) {
    Serial.print("Frame overrun: ");
    Serial.println(frameElapsedTime);
  }
}
